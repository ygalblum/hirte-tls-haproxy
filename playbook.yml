- name: Generate certificates and create podman secrets for them
  hosts: all
  tasks:
  - name: Generate CA Certificate
    delegate_to: localhost
    run_once: true
    block:
    - name: Create a temporary directory
      ansible.builtin.tempfile:
        state: directory
        suffix: hirte
      register: scratch_dir

    - name: Generate a passphrase for the CA certificate's private key
      set_fact:
        secret_ca_passphrase: "{{ lookup('community.general.random_string') }}"

    - name: Create private key with password protection
      community.crypto.openssl_privatekey:
        path: "{{ scratch_dir.path }}/ca-certificate.key"
        passphrase: "{{ secret_ca_passphrase }}"
        cipher: auto

    - name: Create certificate signing request (CSR) for CA certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ scratch_dir.path }}/ca-certificate.key"
        privatekey_passphrase: "{{ secret_ca_passphrase }}"
        common_name: Ansible CA
        use_common_name_for_san: false  # since we do not specify SANs, don't use CN as a SAN
        basic_constraints:
        - 'CA:TRUE'
        basic_constraints_critical: true
        key_usage:
        - keyCertSign
        key_usage_critical: true
      register: ca_csr

    - name: Create self-signed CA certificate from CSR
      community.crypto.x509_certificate:
        path: "{{ scratch_dir.path }}/ca-certificate.pem"
        csr_content: "{{ ca_csr.csr }}"
        privatekey_path: "{{ scratch_dir.path }}/ca-certificate.key"
        privatekey_passphrase: "{{ secret_ca_passphrase }}"
        provider: selfsigned

  - name: Save the scratch_dir path as certs_dir
    set_fact:
      certs_dir: "{{ scratch_dir.path }}"

  - name: Set the manager_address
    set_fact:
      manager_address: "{{ hostvars[groups['manager'][0]]['ansible_facts']['default_ipv4']['address'] }}"

  - name: Calculate the list of node names
    set_fact:
      allowed_node_names: "{{ allowed_node_names|default([]) + [ hostvars[item]['hirte_node_name'] ] }}"
    loop: "{{ groups.all }}"

  - name: Calculate the string for the allowed node names
    set_fact:
      allowed_nodes: "{{ allowed_node_names|join(',') }}"

- name: Setup Hirte Manager
  hosts: manager
  become: true
  roles:
  - common
  - manager
  - agent

- name: Setup Agents
  hosts: agents
  become: true
  roles:
  - common
  - agent
